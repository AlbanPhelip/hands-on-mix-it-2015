# This is the main configuration file for the application.
# ~~~~~

# Secret key
# ~~~~~
# The secret key is used to secure cryptographics functions.
# If you deploy your application to several instances be sure to use the same key!
application.secret="nTnOIy6^yFM5o[Z_T6jBriIYm7id43TSeLJC1U?bxt?PhfMJeCYX@s;RcNqX]xeA"

# The application languages
# ~~~~~
application.langs="en"

# Global object class
# ~~~~~
# Define the Global object class for this application.
# Default to Global in the root package.
# application.global=Global

# Router
# ~~~~~
# Define the Router object to use for this application.
# This router will be looked up first when the application is starting up,
# so make sure this is the entry point.
# Furthermore, it's assumed your route file is named properly.
# So for an application router like `my.application.Router`,
# you may need to define a router file `conf/my.application.routes`.
# Default to Routes in the root package (and conf/routes)
# application.router=my.application.Routes

# Database configuration
# ~~~~~
# You can declare as many datasources as you want.
# By convention, the default datasource is named `default`
#
# db.default.driver=org.h2.Driver
# db.default.url="jdbc:h2:mem:play"
# db.default.user=sa
# db.default.password=""

# Evolutions
# ~~~~~
# You can disable evolutions if needed
# evolutionplugin=disabled

# Logger
# ~~~~~
# You can also configure logback (http://logback.qos.ch/),
# by providing an application-logger.xml file in the conf directory.

# Root logger:
logger.root=ERROR

# Logger used by the framework:
logger.play=INFO

# Logger provided to your application:
logger.application=DEBUG

manager {
  ###
  # Server dir (containing notebook files)
  #notebooks.dir=./conf/notebooks

  ###
  # Static resources to be made available on the web server
  # You may add your own resource directories
  # Paths may be relative to the server root, or absolute.
  #resources=["./my-resources"]

  ##
  # Name of SparkNotebook
  #name = spark-notebook

  kernel {
    ###
    # Uncomment to enable remote vm debugging on the provided port
    #
    #debug.port=9090

    ###
    # Add vmArgs to the remote process
    #vmArgs=["-XX:+PrintGCDetails", "-XX:+PrintGCDetails"]

    ###
    # Working directory for kernel VMs
    #dir=.


    ###
    # List of URLs of kernel init scripts (to be run when a kernel first starts).
    #init=[]

    ###
    # Kernel VM memory settings
    #heap=4g
    #stack=-1 #default XSS
    #permGen=1024m
    #reservedCodeCache=-1 #default

    ###
    # Classpath for kernel VMs (defaults to server VM classpath)
    #classpath=[]

    ###
    # REPL compiler options
    #compilerArgs=[]
  }
}

notebook-server {
  akka {
    loggers = ["akka.event.slf4j.Slf4jLogger"]
    loglevel = "DEBUG"
    stdout-loglevel = "DEBUG"

    log-config-on-start = off

    daemonic = true

    debug {
      ## enable function of LoggingReceive, which is to log any received message at DEBUG level
      # receive = on
      ## enable DEBUG logging of all AutoReceiveMessages (Kill, PoisonPill and the like)
      # autoreceive = on
      ## enable DEBUG logging of actor lifecycle changes
      # lifecycle = on
    }

    actor {
      provider = "akka.remote.RemoteActorRefProvider"

      default-stash-dispatcher {
        mailbox-type = "akka.dispatch.UnboundedDequeBasedMailbox"
      }
    }

    remote {
      ## Debugging:
      # log-sent-messages = on
      # log-received-messages = on

      enabled-transports = ["akka.remote.netty.tcp"]
      # transport = "akka.remote.netty.NettyRemoteTransport"

      netty.tcp {
        hostname = "127.0.0.1"
        port = 0

        maximum-frame-size = "1 GiB"
      }
    }
  }
}