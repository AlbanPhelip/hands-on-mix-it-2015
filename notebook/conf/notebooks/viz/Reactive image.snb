{
  "metadata" : {
    "name" : "Reactive image",
    "user_save_timestamp" : "1970-01-01T01:00:00.000Z",
    "auto_save_timestamp" : "1970-01-01T01:00:00.000Z",
    "language_info" : {
      "name" : "Scala",
      "file_extension" : "scala",
      "codemirror_mode" : "text/x-scala"
    },
    "trusted" : true
  },
  "cells" : [ {
    "metadata" : { },
    "cell_type" : "markdown",
    "source" : "## Play with images"
  }, {
    "metadata" : { },
    "cell_type" : "markdown",
    "source" : "### First create a `img` widget of type `png`"
  }, {
    "metadata" : {
      "trusted" : true,
      "collapsed" : false
    },
    "cell_type" : "code",
    "source" : "val i = img(\"png\", \"250px\", \"250px\")",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "i: notebook.front.SingleConnectedWidget[java.awt.image.BufferedImage]{implicit val codec: notebook.Codec[play.api.libs.json.JsValue,java.awt.image.BufferedImage]; lazy val toHtml: scala.xml.Elem; def url(u: java.net.URL): Unit; def file(f: java.io.File): Unit} = <anon$2 widget>\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : "<p>\n      <img width=\"250px\" height=\"250px\" data-bind=\"attr:{src: value}\"/>\n        <script data-this=\"{&quot;valueId&quot;:&quot;anone9898911f01477b8f71faf2610402383&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/\n                req(\n                  ['observable', 'knockout'],\n                  function (O, ko) {\n                    ko.applyBindings({\n                        value: O.makeObservable(valueId)\n                      },\n                      this\n                    );\n                  }\n                );\n            /*]]>*/</script>\n      </p>"
      },
      "output_type" : "execute_result",
      "execution_count" : 4
    } ]
  }, {
    "metadata" : { },
    "cell_type" : "markdown",
    "source" : "### Load the widget with an online URL"
  }, {
    "metadata" : {
      "trusted" : true,
      "collapsed" : false
    },
    "cell_type" : "code",
    "source" : "val image1 = new java.net.URL(\"https://encrypted-tbn1.gstatic.com/images?q=tbn:ANd9GcQ920yg30NDEeI51ri5DlbSLnXx9szikFDJmmXPOk8KaV1cPfms\") \ni.url(image1)",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "warning: there were 1 feature warning(s); re-run with -feature for details\nimage1: java.net.URL = https://encrypted-tbn1.gstatic.com/images?q=tbn:ANd9GcQ920yg30NDEeI51ri5DlbSLnXx9szikFDJmmXPOk8KaV1cPfms\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 8
    } ]
  }, {
    "metadata" : { },
    "cell_type" : "markdown",
    "source" : "**Note: there are two other ways to load/update the widget with an image:**\n* use `i.file(new java.io.File(\"...\"))`\n* use `i(anotherBufferedImage)`"
  }, {
    "metadata" : { },
    "cell_type" : "markdown",
    "source" : "### Update the widget with another online URL"
  }, {
    "metadata" : {
      "trusted" : true,
      "collapsed" : false
    },
    "cell_type" : "code",
    "source" : "val image2 = new java.net.URL(\"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcTPPeJM3HpX_0aGbMJ8H1HgglUsqkvxM5cZ0VTI4eJ5Rok1s3ra\")\ni.url(image2)",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "warning: there were 1 feature warning(s); re-run with -feature for details\nimage2: java.net.URL = https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcTPPeJM3HpX_0aGbMJ8H1HgglUsqkvxM5cZ0VTI4eJ5Rok1s3ra\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 9
    } ]
  }, {
    "metadata" : { },
    "cell_type" : "markdown",
    "source" : "### Animate the widget by diplaying URLs alternatively "
  }, {
    "metadata" : {
      "trusted" : true,
      "collapsed" : false
    },
    "cell_type" : "code",
    "source" : "import scala.concurrent.ExecutionContext.Implicits.global\nimport scala.concurrent.Future\n\n// update the timseries 5 times\nFuture.sequence((1 to 10).map{ k => \n  Future { \n    // update the graph with new data every 10 seconds\n    Thread.sleep(k*2*1000); \n    i.url(if (k%2==0) image1 else image2 )\n  } \n})",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "warning: there were 1 feature warning(s); re-run with -feature for details\nimport scala.concurrent.ExecutionContext.Implicits.global\nimport scala.concurrent.Future\nres9: scala.concurrent.Future[scala.collection.immutable.IndexedSeq[Unit]] = scala.concurrent.impl.Promise$DefaultPromise@303ab02d\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : "scala.concurrent.impl.Promise$DefaultPromise@303ab02d"
      },
      "output_type" : "execute_result",
      "execution_count" : 11
    } ]
  } ],
  "nbformat" : 4
}